"use client";

import { useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import type { Dictionary } from "@/lib/get-dictionary";
import type { Material, WasteType } from "@/lib/types";

const formSchema = (dictionary: Dictionary["materialsPage"]["materialDialog"]["validation"]) => z.object({
  name: z.string().min(2, { message: dictionary.name.min }),
  type: z.enum(["Recycling", "Organic", "General", "Hazardous"], {
    required_error: dictionary.type.required,
  }),
  pricePerKg: z.coerce.number().min(0, { message: dictionary.price.min }),
  serviceCostPerKg: z.coerce.number().min(0, { message: dictionary.serviceCost.min }),
});

type FormSchema = z.infer<ReturnType<typeof formSchema>>;

interface MaterialDialogProps {
    open: boolean;
    onOpenChange: (open: boolean) => void;
    dictionary: Dictionary["materialsPage"]["materialDialog"];
    onSave: (material: Material) => void;
    material: Material | null;
}

export function MaterialDialog({ open, onOpenChange, dictionary, onSave, material }: MaterialDialogProps) {
  // ✅ FIX 1: Definir valores por defecto que NUNCA sean undefined
  const getDefaultValues = () => ({
    name: "",
    type: "Recycling" as const, // ✅ CAMBIO: Usar valor válido en lugar de undefined
    pricePerKg: 0,
    serviceCostPerKg: 0,
  });

  const form = useForm<FormSchema>({
    resolver: zodResolver(formSchema(dictionary.validation)),
    defaultValues: getDefaultValues(), // ✅ CAMBIO: Usar función que garantiza valores válidos
  });
  
  // ✅ FIX 2: useEffect mejorado con valores seguros
  useEffect(() => {
    if (open) {
      if (material) {
        // Modo edición: cargar datos del material
        form.reset({
          name: material.name || "",
          type: material.type || "Recycling", // ✅ CAMBIO: Nunca undefined
          pricePerKg: material.pricePerKg || 0,
          serviceCostPerKg: material.serviceCostPerKg || 0,
        });
      } else {
        // Modo creación: usar valores por defecto
        form.reset(getDefaultValues());
      }
    }
  }, [material, form, open]);

  const onSubmit = (values: FormSchema) => {
    const materialData: Material = {
        ...values,
        id: material?.id || '', // Keep existing id or it will be generated by the save function
    }
    onSave(materialData);
  };

  // ✅ FIX 3: handleOpenChange mejorado con reset completo
  const handleOpenChange = (isOpen: boolean) => {
    if (!isOpen) {
      form.reset(getDefaultValues()); // ✅ CAMBIO: Reset con valores específicos
    }
    onOpenChange(isOpen);
  };
  
  return (
    <Dialog open={open} onOpenChange={handleOpenChange}>
      <DialogContent className="sm:max-w-[425px]">
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)}>
            <DialogHeader>
              <DialogTitle>{material ? dictionary.editTitle : dictionary.addTitle}</DialogTitle>
              <DialogDescription>
                {dictionary.description}
              </DialogDescription>
            </DialogHeader>
            <div className="grid gap-4 py-4">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{dictionary.name}</FormLabel>
                    <FormControl>
                      <Input 
                        placeholder={dictionary.namePlaceholder} 
                        {...field}
                        value={field.value || ""} // ✅ PROTECCIÓN EXTRA
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="type"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{dictionary.type}</FormLabel>
                    {/* ✅ FIX 4: CAMBIO CRÍTICO - usar value en lugar de defaultValue */}
                    <Select 
                      onValueChange={field.onChange} 
                      value={field.value || "Recycling"} // ✅ CAMBIO: value + fallback
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder={dictionary.selectType} />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        {Object.keys(dictionary.types).map((key) => (
                          <SelectItem key={key} value={key}>{dictionary.types[key as WasteType]}</SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="pricePerKg"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{dictionary.price}</FormLabel>
                    <FormControl>
                      <Input 
                        type="number" 
                        step="0.01" 
                        placeholder={dictionary.pricePlaceholder} 
                        {...field}
                        value={field.value?.toString() || "0"} // ✅ PROTECCIÓN EXTRA para números
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="serviceCostPerKg"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{dictionary.serviceCost}</FormLabel>
                    <FormControl>
                      <Input 
                        type="number" 
                        step="0.01" 
                        placeholder={dictionary.serviceCostPlaceholder} 
                        {...field}
                        value={field.value?.toString() || "0"} // ✅ PROTECCIÓN EXTRA para números
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            </div>
            <DialogFooter>
              <Button type="button" variant="ghost" onClick={() => onOpenChange(false)}>{dictionary.cancel}</Button>
              <Button type="submit">{dictionary.save}</Button>
            </DialogFooter>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}